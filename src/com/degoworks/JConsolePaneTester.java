/*
 * JConsolePaneTester.java - Test application for JConsole
 *
 * Copyright (c) 2004-2006 Gregory Kotsaftis
 * gregkotsaftis@yahoo.com
 * http://zeus-jscl.sourceforge.net/
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
package com.degoworks;

import gr.zeus.ui.JConsolePane;
import gr.zeus.util.GUIUtils;
import java.awt.Color;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;

import java.io.File;
import java.io.FilenameFilter;

public class JConsolePaneTester extends JFrame {
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	// this is the actual JConsole component. 
    // Create a panel containing the console.
    private static JConsolePane s_consolePane = JConsolePane.getConsolePane();
    
    private boolean m_realExit = true;
    
    private String projectPath = "C:/eclipse/workspace/DegoWorks/projects/";
    private String projectExt = ".project.xml";
    private String[] projectNames;
    
    
    public JConsolePaneTester()
    {
		listProjects();//get xmls of form *.project.xml
        initComponents();		
        // add the console panel to the center panel of this test frame
        centerPanel.add( s_consolePane );
		s_consolePane.showConsole();
        GUIUtils.centerOnScreen( this );
    }
    
    
    /**
     * Just to be able to use the JTester which is a wrapper for all
     * the demos. If we use the JTester we also setExitMode( false ),
     * else the default is for each individual test to System.exit()
     * by it's own...
     */
    public void setExitMode(boolean exit)
    {
        m_realExit = exit;
    }

    
    /**
     * provide our own exit() method in order to be able to
     * save the trace file when our application aborts it's normal
     * execution and we don't have the time to see the JConsole for
     * error details...
     */
    private void myExit(int code)
    {
        if( code!=0 )
        {
            // dump all messages printed to a new logfile if you wish!
            s_consolePane.dumpConsole("dump.log", false);
            
            JOptionPane.showMessageDialog(
                this,
                "Application Error!" + "\n" + "Check dump.log for details!",
                "Fatal Error Occured",
                JOptionPane.ERROR_MESSAGE);
        }
        
        // actually not really needed if we are to invoke exit() next...
        s_consolePane.destroyConsole();
        
        // ...just to demonstrate the actual restore of stdout, stderr
        //System.out.println("Hello again from stdout");
        //System.err.println("Hello again from stderr");
        
        if( m_realExit )
        {
            System.exit( code );
        }
        else
        {
            setVisible( false );
            dispose();
        }
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        northPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        selectLabel = new javax.swing.JLabel("Select Project:");
        comboBox = new javax.swing.JComboBox();
        loadButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();
        southPanel = new javax.swing.JPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        consoleMenuItem = new javax.swing.JMenuItem();
        errorExitMenuItem = new javax.swing.JMenuItem();
        normalExitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("JConsolePaneTester");
        northPanel.setLayout(new java.awt.BorderLayout());

        jPanel1.add(selectLabel);

        comboBox.setModel(new javax.swing.DefaultComboBoxModel(projectNames));
        jPanel1.add(comboBox);

        loadButton.setText("Load");
		loadButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                loadButtonActionPerformed(evt);
            }
        });

        jPanel1.add(loadButton);

        northPanel.add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(northPanel, java.awt.BorderLayout.NORTH);

        centerPanel.setLayout(new java.awt.BorderLayout());

        centerPanel.setBorder(new javax.swing.border.TitledBorder("JConsole"));
        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);



        getContentPane().add(southPanel, java.awt.BorderLayout.SOUTH);

        fileMenu.setText("File");
        consoleMenuItem.setText("Show Console");
        consoleMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                consoleMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(consoleMenuItem);

        errorExitMenuItem.setText("Exit with error code");
        errorExitMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                errorExitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(errorExitMenuItem);

        normalExitMenuItem.setText("Normal Exit");
        normalExitMenuItem.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                normalExitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(normalExitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        setBounds(0, 0, 640, 480);
    }
    // </editor-fold>//GEN-END:initComponents

    private void normalExitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_normalExitMenuItemActionPerformed
    {//GEN-HEADEREND:event_normalExitMenuItemActionPerformed

        myExit( 0 );
        
    }//GEN-LAST:event_normalExitMenuItemActionPerformed

    private void errorExitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_errorExitMenuItemActionPerformed
    {//GEN-HEADEREND:event_errorExitMenuItemActionPerformed

        myExit( 1 );
        
    }//GEN-LAST:event_errorExitMenuItemActionPerformed

    private void consoleMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_consoleMenuItemActionPerformed
    {//GEN-HEADEREND:event_consoleMenuItemActionPerformed

        // just like any other frame
        s_consolePane.setVisible( true );
        
    }//GEN-LAST:event_consoleMenuItemActionPerformed

    private void showConsoleActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_showConsoleActionPerformed
    {//GEN-HEADEREND:event_showConsoleActionPerformed

        s_consolePane.showConsole();
        
    }//GEN-LAST:event_showConsoleActionPerformed


    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_submitButtonActionPerformed
    {//GEN-HEADEREND:event_submitButtonActionPerformed
		String projectFile = projectPath + comboBox.getSelectedItem() + projectExt;
        System.out.println("open project: " + projectFile);
        
    }//GEN-LAST:event_submitButtonActionPerformed

    private void exceptionButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exceptionButtonActionPerformed
    {//GEN-HEADEREND:event_exceptionButtonActionPerformed

        // fake an exception
        String numS = "this is not a number!";
        
        // this will raise an runtime exception
        int num = Integer.parseInt( numS );
        
        // actually never executed...
        System.out.println("num=" + num);
        
    }//GEN-LAST:event_exceptionButtonActionPerformed


    
    /**
     * setup our look and feel
     */
    private static void init_lnf()
    {
        try
        {
            UIManager.setLookAndFeel( 
                    UIManager.getSystemLookAndFeelClassName() );

            // NOTE: since the JConsolePane is actually a singleton, if we use
            // any LOOK & FEEL other than the default, we also need to invoke
            // this method to update the console's lnf...
            s_consolePane.updateLNF();
        }
        catch( Exception e )
        {
            System.err.println("Cannot initialize the look & feel");
            
            e.printStackTrace();
        }
    }
    
    
    /**
     * configure and start the JConsole
     */
    private static void init_console()
    {
        s_consolePane.setBackgroundColor( Color.WHITE );
        s_consolePane.setForegroundColor( Color.BLACK );
        s_consolePane.setSelectedTextColor( Color.WHITE );
        s_consolePane.setSelectionColor( Color.DARK_GRAY );
        
        // if you want to modify the text/buttons/title/etc of JConsole,
        // or force it to autosave and clear the console's messages
        // you can do it here ... before starting the console!
        s_consolePane.setAppendFirstTime( false );
        s_consolePane.setAutoSave( true );
        
        // clear the console messages (only the textarea) when maxchars are
        // reached, because a lot of messages can slow down the textarea panel.
        //s_consolePane.setMaxChars( 10 * 1024 );
        
        // hide the control buttons, since we will display the console inside
        // our frame
        //s_consolePane.hideControlButtons();
        
        // finally start the console
        s_consolePane.startConsole();
        
        // demonstrate that our console is up and running...
        //System.out.println("This is the very first message logged to JConsole (stdout)");
        //System.err.println("This is the very first message logged to JConsole (stderr)");
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        init_lnf();
        
        // since the actual console is only one (singleton), we might as well
        // configure it here...
        init_console();
        
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new JConsolePaneTester().setVisible(true);
            }
        });
    }
    
    public void listProjects(){
    	System.out.println("listProjects");
		File dir = new File(projectPath);
		if(dir.isDirectory()){
			String[] children = dir.list();
			if (children == null) {
				// Either dir does not exist or is not a directory
			} else {
				for (int i=0; i<children.length; i++) {
					// Get filename of file or directory
					String filename = children[i];
				}
			}

			// It is also possible to filter the list of returned files.
			// This example only returns files that end with '.project.xml'.
			FilenameFilter filter = new FilenameFilter() {
				public boolean accept(File dir, String name) {
					//return !name.startsWith(".");					
					return name.endsWith(".project.xml");
				}
			};
			children = dir.list(filter);
			projectNames = new String[children.length];
			for(int i=0; i<children.length; i++){
	
				projectNames[i] = children[i].substring(0, children[i].lastIndexOf(".project.xml"));
				System.out.println("projectName: " + projectNames[i]);
			}
    	} 
    	else {
    		System.err.println("directory not found: " + dir);
    	}
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JComboBox comboBox;
    private javax.swing.JMenuItem consoleMenuItem;
    private javax.swing.JMenuItem errorExitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem normalExitMenuItem;
    private javax.swing.JPanel northPanel;
    private javax.swing.JPanel southPanel;
    private javax.swing.JButton loadButton;
    private javax.swing.JLabel selectLabel;
    // End of variables declaration//GEN-END:variables
    
}
